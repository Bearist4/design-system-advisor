name: QA Automation Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual triggering

jobs:
  # Code Quality & Security
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: TypeScript type checking
        run: npx tsc --noEmit

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: Check for outdated packages
        run: npm outdated || true

  # Build & Test
  build-and-test:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: |
          if [ -z "$NEXT_PUBLIC_SUPABASE_URL" ]; then
            echo "Warning: NEXT_PUBLIC_SUPABASE_URL not set, using placeholder"
            export NEXT_PUBLIC_SUPABASE_URL="https://placeholder.supabase.co"
          fi
          if [ -z "$NEXT_PUBLIC_SUPABASE_ANON_KEY" ]; then
            echo "Warning: NEXT_PUBLIC_SUPABASE_ANON_KEY not set, using placeholder"
            export NEXT_PUBLIC_SUPABASE_ANON_KEY="placeholder-key"
          fi
          npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Test build output
        run: |
          if [ ! -d ".next" ]; then
            echo "Build failed - .next directory not found"
            exit 1
          fi

  # Performance & Accessibility Testing
  performance-testing:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Build application
        run: |
          if [ -z "$NEXT_PUBLIC_SUPABASE_URL" ]; then
            echo "Warning: NEXT_PUBLIC_SUPABASE_URL not set, using placeholder"
            export NEXT_PUBLIC_SUPABASE_URL="https://placeholder.supabase.co"
          fi
          if [ -z "$NEXT_PUBLIC_SUPABASE_ANON_KEY" ]; then
            echo "Warning: NEXT_PUBLIC_SUPABASE_ANON_KEY not set, using placeholder"
            export NEXT_PUBLIC_SUPABASE_ANON_KEY="placeholder-key"
          fi
          npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Start application
        run: |
          npm start &
          sleep 15
          # Wait for server to be ready
          timeout 30 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 1; done'
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Run Playwright tests
        run: npx playwright test
        env:
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:3000
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  # Visual Regression Testing
  visual-testing:
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright
        run: npx playwright install --with-deps

      - name: Build application
        run: |
          if [ -z "$NEXT_PUBLIC_SUPABASE_URL" ]; then
            echo "Warning: NEXT_PUBLIC_SUPABASE_URL not set, using placeholder"
            export NEXT_PUBLIC_SUPABASE_URL="https://placeholder.supabase.co"
          fi
          if [ -z "$NEXT_PUBLIC_SUPABASE_ANON_KEY" ]; then
            echo "Warning: NEXT_PUBLIC_SUPABASE_ANON_KEY not set, using placeholder"
            export NEXT_PUBLIC_SUPABASE_ANON_KEY="placeholder-key"
          fi
          npm run build
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Start application
        run: |
          npm start &
          sleep 15
          # Wait for server to be ready
          timeout 30 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 1; done'
        env:
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Run visual tests
        run: npx playwright test --grep="visual"
        env:
          PLAYWRIGHT_TEST_BASE_URL: http://localhost:3000
          NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
          NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

  # Generate QA Report
  generate-report:
    runs-on: ubuntu-latest
    needs: [code-quality, build-and-test, performance-testing, visual-testing]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate QA Report
        run: |
          echo "# QA Report - $(date)" > qa-report.md
          echo "" >> qa-report.md
          echo "## Test Results Summary" >> qa-report.md
          echo "" >> qa-report.md
          echo "| Test Suite | Status |" >> qa-report.md
          echo "|------------|--------|" >> qa-report.md
          echo "| Code Quality | ${{ needs.code-quality.result }} |" >> qa-report.md
          echo "| Build & Test | ${{ needs.build-and-test.result }} |" >> qa-report.md
          echo "| Performance | ${{ needs.performance-testing.result }} |" >> qa-report.md
          echo "| Visual Testing | ${{ needs.visual-testing.result }} |" >> qa-report.md
          echo "" >> qa-report.md
          echo "## Recommendations" >> qa-report.md
          echo "" >> qa-report.md
          echo "- Review any failed tests above" >> qa-report.md
          echo "- Check performance metrics in Lighthouse report" >> qa-report.md
          echo "- Verify accessibility compliance" >> qa-report.md

      - name: Upload QA Report
        uses: actions/upload-artifact@v4
        with:
          name: qa-report
          path: qa-report.md

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('qa-report.md', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });

  # Security Scanning
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/code-scanning/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
